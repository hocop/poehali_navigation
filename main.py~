import numpy as np
import cv2
from math import *
import requests

# parameters
#################################################################
# for Ruslan's computer
camName = 'right'
camTgFiMax = 0.661
camTgThMax = 0.372

# for Colya's computer
#camName = 'left'
#camTgFiMax = 0.641
#camTgThMax = 0.360

serAddr = 'http://127.0.0.1:5000/cord'
#################################################################


def compAngles(x, y):
	return (-x/camTgFiMax, y/camTgThMax)

def sendAngles(tgFi, tgTh):
	requests.post(serAddr, data={'tgFi':tgFi, 'tgTh':tgTh, 'cam':camName})

def getFrame():
	ret, frame = cap.read()
#	frame = cv2.resize(frame, None, fx=0.5, fy=0.5)
	return frame

# start
cap = cv2.VideoCapture(0)
old_frame = getFrame()
old_gray = cv2.cvtColor(old_frame, cv2.COLOR_BGR2GRAY)
hsv = np.zeros_like(old_frame)
hsv[...,1] = 255

# Create a mask image for drawing purposes
mask = np.zeros_like(old_frame)

while(True):
	# Capture frame-by-frame
	frame = getFrame()
	frame_gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
	
	# calculate optical flow
	flow = cv2.calcOpticalFlowFarneback(old_gray,frame_gray, None, 0.5, 3, 15, 3, 5, 1.2, 0)
	mag, ang = cv2.cartToPolar(flow[...,0], flow[...,1])
	
	# mask
	ret,mask = cv2.threshold(mag,3,255,cv2.THRESH_BINARY) # 3 for full res
	mask = cv2.erode(mask, None, iterations=4)
	mask = cv2.dilate(mask, None, iterations=4)
	
	# Moments
	M = cv2.moments(mask)
	cx = int(M['m10'] / (M['m00']+1))
	cy = int(M['m01'] / (M['m00']+1))
	cr = int(sqrt(M['m00']/pi/255.0))
	mask = cv2.cvtColor(mask, cv2.COLOR_GRAY2RGB)
	cv2.circle(mask, (cx,cy), cr, (0,255,0), 5)
	
	# Send info
	height, width, channels = mask.shape
	x = (2*cx - width) / width
	y = (2*cy - height) / height
	tgFi, tgTh = compAngles(x, y)
	sendAngles(tgFi, tgTh) #============TO=COPTER==========>>>>>>>>>
	
	# Display the resulting frame
	cv2.imshow('frame', mask)
	if cv2.waitKey(1) & 0xFF == ord('q'):
		break
	
	# Update previous frame
	old_gray = frame_gray.copy()


# When everything done, release the capture
cap.release()
cv2.destroyAllWindows()
